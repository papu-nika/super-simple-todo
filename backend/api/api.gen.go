// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// PostTodosJSONBody defines parameters for PostTodos.
type PostTodosJSONBody struct {
	// Completed Whether the TODO is completed
	Completed *bool `json:"completed,omitempty"`

	// Id The unique identifier for a TODO
	Id *string `json:"id,omitempty"`

	// Title The title of the TODO
	Title *string `json:"title,omitempty"`
}

// PostTodosJSONRequestBody defines body for PostTodos for application/json ContentType.
type PostTodosJSONRequestBody PostTodosJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all TODOs
	// (GET /todos)
	GetTodos(c *gin.Context)
	// Create a new TODO
	// (POST /todos)
	PostTodos(c *gin.Context)
	// Delete a TODO by ID
	// (DELETE /todos/{id})
	DeleteTodosId(c *gin.Context, id string)
	// Get a TODO by ID
	// (GET /todos/{id})
	GetTodosId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetTodos operation middleware
func (siw *ServerInterfaceWrapper) GetTodos(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTodos(c)
}

// PostTodos operation middleware
func (siw *ServerInterfaceWrapper) PostTodos(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTodos(c)
}

// DeleteTodosId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTodosId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTodosId(c, id)
}

// GetTodosId operation middleware
func (siw *ServerInterfaceWrapper) GetTodosId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTodosId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/todos", wrapper.GetTodos)
	router.POST(options.BaseURL+"/todos", wrapper.PostTodos)
	router.DELETE(options.BaseURL+"/todos/:id", wrapper.DeleteTodosId)
	router.GET(options.BaseURL+"/todos/:id", wrapper.GetTodosId)
}

type GetTodosRequestObject struct {
}

type GetTodosResponseObject interface {
	VisitGetTodosResponse(w http.ResponseWriter) error
}

type GetTodos200JSONResponse []struct {
	// Completed Whether the TODO is completed
	Completed *bool `json:"completed,omitempty"`

	// Id The unique identifier for a TODO
	Id *string `json:"id,omitempty"`

	// Title The title of the TODO
	Title *string `json:"title,omitempty"`
}

func (response GetTodos200JSONResponse) VisitGetTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTodosRequestObject struct {
	Body *PostTodosJSONRequestBody
}

type PostTodosResponseObject interface {
	VisitPostTodosResponse(w http.ResponseWriter) error
}

type PostTodos201Response struct {
}

func (response PostTodos201Response) VisitPostTodosResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type DeleteTodosIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteTodosIdResponseObject interface {
	VisitDeleteTodosIdResponse(w http.ResponseWriter) error
}

type DeleteTodosId204Response struct {
}

func (response DeleteTodosId204Response) VisitDeleteTodosIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetTodosIdRequestObject struct {
	Id string `json:"id"`
}

type GetTodosIdResponseObject interface {
	VisitGetTodosIdResponse(w http.ResponseWriter) error
}

type GetTodosId200JSONResponse struct {
	// Completed Whether the TODO is completed
	Completed *bool `json:"completed,omitempty"`

	// Id The unique identifier for a TODO
	Id *string `json:"id,omitempty"`

	// Title The title of the TODO
	Title *string `json:"title,omitempty"`
}

func (response GetTodosId200JSONResponse) VisitGetTodosIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all TODOs
	// (GET /todos)
	GetTodos(ctx context.Context, request GetTodosRequestObject) (GetTodosResponseObject, error)
	// Create a new TODO
	// (POST /todos)
	PostTodos(ctx context.Context, request PostTodosRequestObject) (PostTodosResponseObject, error)
	// Delete a TODO by ID
	// (DELETE /todos/{id})
	DeleteTodosId(ctx context.Context, request DeleteTodosIdRequestObject) (DeleteTodosIdResponseObject, error)
	// Get a TODO by ID
	// (GET /todos/{id})
	GetTodosId(ctx context.Context, request GetTodosIdRequestObject) (GetTodosIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetTodos operation middleware
func (sh *strictHandler) GetTodos(ctx *gin.Context) {
	var request GetTodosRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTodos(ctx, request.(GetTodosRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTodos")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTodosResponseObject); ok {
		if err := validResponse.VisitGetTodosResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostTodos operation middleware
func (sh *strictHandler) PostTodos(ctx *gin.Context) {
	var request PostTodosRequestObject

	var body PostTodosJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTodos(ctx, request.(PostTodosRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTodos")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostTodosResponseObject); ok {
		if err := validResponse.VisitPostTodosResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTodosId operation middleware
func (sh *strictHandler) DeleteTodosId(ctx *gin.Context, id string) {
	var request DeleteTodosIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTodosId(ctx, request.(DeleteTodosIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTodosId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTodosIdResponseObject); ok {
		if err := validResponse.VisitDeleteTodosIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTodosId operation middleware
func (sh *strictHandler) GetTodosId(ctx *gin.Context, id string) {
	var request GetTodosIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTodosId(ctx, request.(GetTodosIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTodosId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTodosIdResponseObject); ok {
		if err := validResponse.VisitGetTodosIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xTTY/TMBD9K9bAMTRZllNuhUqop61EJQ4IITeZNrMktteegqIq/x2N3e1XAhKH3Zvt",
	"8byZ9+bNASrbOWvQcIDyAKFqsNOXxx9sayt3561Dz4QxKmktMtZyqTFUnhyTNVDC1wa5Qa+4QbV+WDwo",
	"Cur8PQPuHUIJG2tb1AaGDGgCZd2g2ht62qOiGg3TltCrrfVKR9QzUGBPZic4TNziNFQMKbs9dTXOH04v",
	"dvOIFQvipQjvWgos6MTYRRHeetxCCW/ys4j5MSO/ku8Mrb3XPQxSjMzWjpudq0CilZqvloqt6rTRu6OQ",
	"rMPPMIMTUfiSvsbgfLWEDH6hDwnoblbMCqlsHRrtCEq4nxWze8jAaW4igVy6i6cdRmoyYi2dLGso4TPy",
	"On7IwGNw1oQ0/PdFkTxgGE3M0861VMXM/DFI/WcD/Y9OSeEozq0oEpHxCdUQZxX2Xad9n9pUum2fYxk4",
	"GybYrGy4oPO0x8Afbd2/CJNEQqqQlx1hv8dhpOLdhFdllJVHLbtyTfNTfFVaGfydLCzxNML8QPWQ0GTN",
	"xuQX8T3SX9bRAl53yOgDlN8OQFJbbAEZGN2Jt6iGWwbZhRK3y/N9xO7DX9ilFm/ZpQaPy602vVouZJT/",
	"9OVrMSle0CPj7Te740pP2fxKnmEY/gQAAP//VQjHbMEFAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
